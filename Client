import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;


/**
 * JavaFX App
 */
public class App extends Application {
    
    public static void main(String[] args) {
        launch(args);
    }

   static InetAddress host;
  static final int PORT = 1234;
  Label label = new Label("Response From Server Will Display Here");
  TextField textField = new TextField("");
  Button button = new Button("Send");

  Scene sceneAdd, sceneRemove, sceneTime;
  Stage stage;
  
    @Override
    public void start(Stage primaryStage) {
        
        
        stage = primaryStage;
        stage.setTitle("Your Virtual Scheduler");
        
        //Main
        Label label1 = new Label("Welcome to Your Personal Virtual Schedular"); 
        Button add = new Button("Add Class");
        add.setOnAction(e -> stage.setScene(sceneAdd));       
        
        Button remove = new Button("Remove Class");
        remove.setOnAction(e -> stage.setScene(sceneRemove));
        
        Button display = new Button("Display Schedule");
        display.setOnAction(e -> System.out.println("Schedule displayed"));
        
        Button exit = new Button("Exit");
        exit.setOnAction(e -> {
            System.out.println("The schedular is now closing ...");
            System.exit(0);
                    });
        
        //Main Layout
        GridPane grid1 = new GridPane();
        grid1.add(label1, 300, 0, 20, 50);
        grid1.add(add, 100, 300, 50, 50);
        grid1.add(remove, 300, 300, 50, 50);
        grid1.add(display, 500, 300, 50, 50);
        grid1.add(exit, 300, 1000, 10, 50);
        Scene scene = new Scene (grid1, 600, 600);
        
        //Add
        Label label2 = new Label("Class Adder");
        Button classAdder = new Button("Add Class Here");
        Button add2 = new Button("Go Back Home");
        classAdder.setOnAction(e -> stage.setScene(sceneTime));
        add2.setOnAction(e -> stage.setScene(scene));
        
        
        //Add layout
        VBox layout2 = new VBox(20);
        layout2.getChildren().addAll(label2, classAdder, add2);
        sceneAdd = new Scene (layout2, 600, 600);
        
        //Time
        Label label2_1 = new Label("Select time"); 
        Button timeBTN = new Button("Set Time");
        timeBTN.setOnAction(e -> stage.setScene(scene));
        
        //Time layout
        StackPane layout2_1 = new StackPane();
        layout2_1.getChildren().addAll(label2_1, timeBTN);
        sceneTime = new Scene (layout2_1, 600, 600);
        
        //Remove
        Label label3 = new Label("Class Remover"); 
        Button add3 = new Button("Remove Class Here");
        add3.setOnAction(e -> stage.setScene(scene));
        
        //Remove Layout
        StackPane layout3 = new StackPane();
        layout3.getChildren().addAll(label3, add3);
        sceneRemove = new Scene (layout3, 600, 600);
        
        
        
        button.setOnAction(new EventHandler<ActionEvent>() {
        @Override
        public void handle(ActionEvent t) {
            try 
            {
               host = InetAddress.getLocalHost();
            } 
            catch(UnknownHostException e) 
            {
               System.out.println("Host ID not found!");
               System.exit(1);
            }
           Socket link = null;				
           try 
           {
               link = new Socket(host,PORT);		
               //link = new Socket( "192.168.0.59", PORT);
               BufferedReader in = new BufferedReader(new InputStreamReader(link.getInputStream()));
               PrintWriter out = new PrintWriter(link.getOutputStream(),true);	

               String message = null;
               String response= null;

               System.out.println("Enter message to be sent to server: ");
               message =  textField.getText().toString();
               out.println(message); 		
               response = in.readLine();		
               label.setText(response);
           } 
           catch(IOException e)
           {
               e.printStackTrace();
           } 
           finally 
           {
               try 
               {
                   System.out.println("\n* Closing connection... *");
                   link.close();				//Step 4.
               }catch(IOException e)
               {
                   System.out.println("Unable to disconnect/close!");
                   System.exit(1);
               }
           }
        }});
        
        
        
        
        
        VBox box= new VBox( textField, button, label);
        
        stage.setScene(scene);
        stage.show();
    }

    

}
